@page "/"
@rendermode InteractiveServer
@using FishingRegs.Data.Repositories
@using FishingRegs.Data.Models
@using Microsoft.AspNetCore.Components.Web
@inject IWaterBodyRepository WaterBodyRepository
@inject NavigationManager Navigation

<PageTitle>Fishing Regulations</PageTitle>

<div class="hero-section">
    <h1 class="display-4 text-primary">Fishing Regulations</h1>
    <p class="lead">Find fishing regulations for lakes and waterways</p>
</div>

<div class="row">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <h3><i class="fas fa-search"></i> Search for Lake Regulations</h3>
            </div>
            <div class="card-body">
                <div class="input-group mb-3">
                    <input type="text" class="form-control form-control-lg" @bind="searchTerm" @onkeypress="OnSearchKeyPress" placeholder="Enter lake name..." />
                    <button class="btn btn-primary btn-lg" type="button" @onclick="SearchLakes">
                        <i class="fas fa-search"></i> Search
                    </button>
                </div>
                <p class="text-muted">
                    <small>Search for specific lakes to view current fishing regulations, seasons, and limits.</small>
                </p>

                @if (isLoading)
                {
                    <div class="text-center mt-3">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Searching...</span>
                        </div>
                        <p class="mt-2">Searching lakes...</p>
                    </div>
                }
                else if (searchResults.Any())
                {
                    <div class="mt-3">
                        <h5>Search Results:</h5>
                        <div class="list-group">
                            @foreach (var lake in searchResults.Take(5))
                            {
                                <button class="list-group-item list-group-item-action d-flex justify-content-between align-items-center" 
                                        @onclick="@(() => ViewRegulations(lake.Id))">
                                    <div>
                                        <strong>@lake.Name</strong>
                                        <br />
                                        <small class="text-muted">
                                            <i class="fas fa-map-marker-alt"></i> 
                                            @(lake.County?.Name ?? "Unknown County"), @(lake.State?.Name ?? "Unknown State")
                                        </small>
                                    </div>
                                    <span class="badge bg-primary">View Regulations</span>
                                </button>
                            }
                        </div>
                        @if (searchResults.Count > 5)
                        {
                            <div class="mt-2">
                                <a href="/lakes" class="btn btn-outline-primary">
                                    View all @searchResults.Count results
                                </a>
                            </div>
                        }
                    </div>
                }
                else if (hasSearched && !string.IsNullOrWhiteSpace(searchTerm))
                {
                    <div class="alert alert-info mt-3">
                        <i class="fas fa-info-circle"></i> No lakes found matching "@searchTerm". 
                        <a href="/lakes" class="alert-link">Try the advanced search</a>.
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h4><i class="fas fa-info-circle"></i> Quick Info</h4>
            </div>
            <div class="card-body">
                <ul class="list-unstyled">
                    <li><i class="fas fa-fish text-primary"></i> View species-specific regulations</li>
                    <li><i class="fas fa-calendar text-primary"></i> Check fishing seasons</li>
                    <li><i class="fas fa-ruler text-primary"></i> Size and bag limits</li>
                    <li><i class="fas fa-map-marker-alt text-primary"></i> Lake-specific rules</li>
                </ul>
                <a href="/lakes" class="btn btn-outline-primary">Browse All Lakes</a>
            </div>
        </div>
    </div>
</div>

<style>
    .hero-section {
        text-align: center;
        padding: 2rem 0;
        margin-bottom: 2rem;
    }
    
    .card {
        border: none;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        margin-bottom: 1.5rem;
    }
    
    .card-header {
        background-color: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
    }
    
    .list-unstyled li {
        padding: 0.25rem 0;
    }
    
    .text-primary {
        color: #0d6efd !important;
    }
</style>

@code {
    private string searchTerm = "";
    private bool isLoading = false;
    private bool hasSearched = false;
    private List<WaterBody> searchResults = new();

    private async Task SearchLakes()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
            return;

        isLoading = true;
        hasSearched = false;
        StateHasChanged();

        try
        {
            // Search for water bodies using the repository (includes State and County navigation properties)
            var results = await WaterBodyRepository.SearchByNameAsync(searchTerm);
            searchResults = results.ToList();
        }
        catch (Exception ex)
        {
            // Log error - in production you'd use ILogger
            Console.WriteLine($"Error searching lakes: {ex.Message}");
            searchResults = new List<WaterBody>();
        }
        finally
        {
            isLoading = false;
            hasSearched = true;
            StateHasChanged();
        }
    }

    private async Task OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchLakes();
        }
    }

    private void ViewRegulations(int lakeId)
    {
        // Navigate to regulations page for specific lake
        Navigation.NavigateTo($"/regulations/{lakeId}");
    }
}

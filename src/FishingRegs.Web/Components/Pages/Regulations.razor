@page "/regulations"
@page "/regulations/{LakeId:int}"
@rendermode InteractiveServer
@using FishingRegs.Data.Repositories
@using FishingRegs.Data.Models
@inject IFishingRegulationRepository FishingRegulationRepository
@inject IWaterBodyRepository WaterBodyRepository

<PageTitle>Fishing Regulations</PageTitle>

<h1><i class="fas fa-list-ul"></i> Fishing Regulations</h1>

@if (LakeId.HasValue)
{
    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h3>@lakeName Regulations</h3>
                    <span class="badge bg-primary">@selectedSpecies</span>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">
                            <i class="fas fa-exclamation-triangle"></i> @errorMessage
                        </div>
                    }
                    else if (isLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading regulations...</span>
                            </div>
                        </div>
                    }
                    else if (regulations.Any())
                    {
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="speciesFilter" class="form-label">Filter by Species</label>
                                <select class="form-select" id="speciesFilter" value="@selectedSpecies" @onchange="OnSpeciesChanged">
                                    <option value="All Species">All Species</option>
                                    @foreach (var species in availableSpecies)
                                    {
                                        <option value="@species">@species</option>
                                    }
                                </select>
                            </div>
                        </div>

                        @foreach (var regulation in filteredRegulations)
                        {
                            <div class="card mb-3">
                                <div class="card-header">
                                    <h5 class="mb-0">
                                        <i class="fas fa-fish text-primary"></i> @regulation.Species
                                    </h5>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <strong>Season:</strong><br/>
                                            <span class="badge @(regulation.IsInSeason ? "bg-success" : "bg-warning")">
                                                @regulation.Season
                                            </span>
                                        </div>
                                        <div class="col-md-6">
                                            <strong>Bag Limit:</strong><br/>
                                            @regulation.BagLimit
                                        </div>
                                    </div>
                                    @if (!string.IsNullOrEmpty(regulation.SizeLimit))
                                    {
                                        <div class="row mt-2">
                                            <div class="col-md-6">
                                                <strong>Size Limit:</strong><br/>
                                                @regulation.SizeLimit
                                            </div>
                                        </div>
                                    }
                                    @if (!string.IsNullOrEmpty(regulation.SpecialNotes))
                                    {
                                        <div class="row mt-2">
                                            <div class="col-12">
                                                <strong>Special Notes:</strong><br/>
                                                <div class="alert alert-info small">
                                                    @regulation.SpecialNotes
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle"></i> No regulations found for this lake.
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h4>Lake Information</h4>
                </div>
                <div class="card-body">
                    <dl class="row">
                        <dt class="col-sm-4">Lake:</dt>
                        <dd class="col-sm-8">@lakeName</dd>
                        <dt class="col-sm-4">County:</dt>
                        <dd class="col-sm-8">@lakeCounty</dd>
                        <dt class="col-sm-4">State:</dt>
                        <dd class="col-sm-8">@lakeState</dd>
                        <dt class="col-sm-4">Last Updated:</dt>
                        <dd class="col-sm-8">@lastUpdated.ToString("MMM dd, yyyy")</dd>
                    </dl>
                </div>
            </div>
            
            <div class="card mt-3">
                <div class="card-header">
                    <h4>Actions</h4>
                </div>
                <div class="card-body">
                    <button class="btn btn-outline-primary w-100 mb-2">
                        <i class="fas fa-print"></i> Print Regulations
                    </button>
                    <button class="btn btn-outline-secondary w-100">
                        <i class="fas fa-share"></i> Share Lake
                    </button>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h3>Search for Lake Regulations</h3>
                </div>
                <div class="card-body">
                    <p>Select a lake to view its fishing regulations.</p>
                    <a href="/lakes" class="btn btn-primary">
                        <i class="fas fa-search"></i> Search Lakes
                    </a>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h4>General Information</h4>
                </div>
                <div class="card-body">
                    <p>Fishing regulations include:</p>
                    <ul>
                        <li>Seasonal restrictions</li>
                        <li>Bag and possession limits</li>
                        <li>Size restrictions</li>
                        <li>Special regulations</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int? LakeId { get; set; }

    private string lakeName = "";
    private string lakeCounty = "";
    private string lakeState = "";
    private DateTime lastUpdated = DateTime.Now;
    private string selectedSpecies = "All Species";
    private bool isLoading = false;
    
    private List<FishingRegs.Data.Models.FishingRegulation> regulations = new();
    private List<RegulationDisplay> filteredRegulations = new();
    private List<string> availableSpecies = new();

    protected override async Task OnParametersSetAsync()
    {
        if (LakeId.HasValue)
        {
            await LoadRegulations();
        }
    }

    private string errorMessage = "";

    private async Task LoadRegulations()
    {
        isLoading = true;
        errorMessage = "";
        StateHasChanged();

        try
        {
            if (LakeId.HasValue)
            {
                // Load water body information using a custom query that avoids the missing table
                var waterBody = await WaterBodyRepository.GetWaterBodyWithStateAndCountyAsync(LakeId.Value);
                if (waterBody != null)
                {
                    lakeName = waterBody.Name;
                    lakeCounty = waterBody.County?.Name ?? "Unknown";
                    lakeState = waterBody.State?.Name ?? "Unknown";
                }
                else
                {
                    errorMessage = $"Lake with ID {LakeId.Value} not found.";
                    return;
                }

                // Load fishing regulations for this water body
                var dbRegulations = await FishingRegulationRepository.GetByWaterBodyAsync(LakeId.Value);
                regulations = dbRegulations.ToList();

                // Debug info
                Console.WriteLine($"Found {regulations.Count} regulations for lake {LakeId.Value}");

                // Get available species from regulations
                availableSpecies = regulations
                    .Where(r => r.Species?.CommonName != null)
                    .Select(r => r.Species!.CommonName)
                    .Distinct()
                    .ToList();

                FilterRegulations();
            }
        }
        catch (Exception ex)
        {
            // Show error in UI instead of just console
            errorMessage = $"Error loading regulations: {ex.Message}";
            Console.WriteLine($"Error loading regulations: {ex}");
            regulations = new List<FishingRegs.Data.Models.FishingRegulation>();
            filteredRegulations = new List<RegulationDisplay>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private string FormatSeason(FishingRegs.Data.Models.FishingRegulation regulation)
    {
        if (regulation.SeasonStartMonth.HasValue && regulation.SeasonStartDay.HasValue &&
            regulation.SeasonEndMonth.HasValue && regulation.SeasonEndDay.HasValue)
        {
            var startDate = new DateTime(DateTime.Now.Year, regulation.SeasonStartMonth.Value, regulation.SeasonStartDay.Value);
            var endDate = new DateTime(DateTime.Now.Year, regulation.SeasonEndMonth.Value, regulation.SeasonEndDay.Value);
            return $"{startDate:MMM d} - {endDate:MMM d}";
        }
        return regulation.IsCatchAndRelease ? "Catch & Release Only" : "Open Season";
    }

    private string FormatBagLimit(FishingRegs.Data.Models.FishingRegulation regulation)
    {
        if (regulation.IsCatchAndRelease)
            return "Catch & Release";
        
        if (regulation.DailyLimit.HasValue)
            return $"{regulation.DailyLimit} fish daily";
        
        return "No limit specified";
    }

    private string FormatSizeLimit(FishingRegs.Data.Models.FishingRegulation regulation)
    {
        var limits = new List<string>();
        
        if (regulation.MinimumSizeInches.HasValue)
            limits.Add($"{regulation.MinimumSizeInches}\" minimum");
            
        if (regulation.MaximumSizeInches.HasValue)
            limits.Add($"{regulation.MaximumSizeInches}\" maximum");
            
        if (regulation.ProtectedSlotMinInches.HasValue && regulation.ProtectedSlotMaxInches.HasValue)
            limits.Add($"Protected slot: {regulation.ProtectedSlotMinInches}\"-{regulation.ProtectedSlotMaxInches}\"");
        
        return limits.Any() ? string.Join(", ", limits) : "No size restrictions";
    }

    private string FormatSpecialNotes(FishingRegs.Data.Models.FishingRegulation regulation)
    {
        var notes = new List<string>();
        
        if (regulation.IsCatchAndRelease)
            notes.Add("Catch and release only");
            
        // Add other special notes here based on your regulation model
        
        return notes.Any() ? string.Join("; ", notes) : "";
    }

    private bool IsCurrentlyInSeason(FishingRegs.Data.Models.FishingRegulation regulation)
    {
        if (!regulation.SeasonStartMonth.HasValue || !regulation.SeasonStartDay.HasValue ||
            !regulation.SeasonEndMonth.HasValue || !regulation.SeasonEndDay.HasValue)
            return true; // Assume open if no season specified
            
        var now = DateTime.Now;
        var currentYear = now.Year;
        var startDate = new DateTime(currentYear, regulation.SeasonStartMonth.Value, regulation.SeasonStartDay.Value);
        var endDate = new DateTime(currentYear, regulation.SeasonEndMonth.Value, regulation.SeasonEndDay.Value);
        
        // Handle seasons that cross year boundaries
        if (startDate > endDate)
        {
            return now >= startDate || now <= endDate;
        }
        
        return now >= startDate && now <= endDate;
    }

    private void FilterRegulations()
    {
        var displayRegulations = regulations.Select(r => new RegulationDisplay
        {
            Species = r.Species?.CommonName ?? "Unknown Species",
            Season = FormatSeason(r),
            BagLimit = FormatBagLimit(r),
            SizeLimit = FormatSizeLimit(r),
            SpecialNotes = FormatSpecialNotes(r),
            IsInSeason = IsCurrentlyInSeason(r)
        });

        filteredRegulations = selectedSpecies == "All Species" 
            ? displayRegulations.ToList()
            : displayRegulations.Where(r => r.Species == selectedSpecies).ToList();
        
        Console.WriteLine($"Filtered to {filteredRegulations.Count} regulations for species: {selectedSpecies}");
        StateHasChanged();
    }

    private void OnSpeciesChanged(ChangeEventArgs e)
    {
        selectedSpecies = e.Value?.ToString() ?? "All Species";
        FilterRegulations();
    }

    public class RegulationDisplay
    {
        public string Species { get; set; } = "";
        public string Season { get; set; } = "";
        public string BagLimit { get; set; } = "";
        public string SizeLimit { get; set; } = "";
        public string SpecialNotes { get; set; } = "";
        public bool IsInSeason { get; set; }
    }
}
